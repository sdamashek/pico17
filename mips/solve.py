from z3 import *

w = 32

s = Solver()
inp = BitVec('inp', w)
v6 = BitVec('v6', w)
s.add(v6 == inp & 0xffffffffff000000)
v16 = BitVec('v16', w)
s.add(v16 == inp & 0xff0000)
v7 = BitVec('v7', w)
s.add(v7 == inp & 0xff00)
v4_2 = BitVec('v4_2', w)
s.add(v4_2 == inp & 0xff)
v3 = BitVec('v3', w)
s.add(v3 == v6 >> 24)
v3_2 = BitVec('v3_2', w)
s.add(v3_2 == v3 - 169 - 6)
v5 = BitVec('v5', w)
s.add(v5 == v3_2 << 24)
v16_2 = BitVec('v16_2', w)
s.add(v16_2 == v16 >> 16)
v2 = BitVec('v2', w)
s.add(v2 == v16_2 - 81)
v8 = BitVec('v8', w)
s.add(v8 == v2 << 6)
v3_3 = BitVec('v3_3', w)
s.add(v3_3 == (v2 - ((v2 << 8) - v8) << 16))
v7_2 = BitVec('v7_2', w)
s.add(v7_2 == v7 >> 8)
v2_2 = BitVec('v2_2', w)
s.add(v2_2 == (v4_2 << 1) + 3)
s.add(v7_2 == v2_2)

v2_3 = BitVec('v2_3', w)
s.add(v2_3 == (94 - 94) <<  8) # could also be 165
v6_2 = BitVec('v6_2', w)
s.add(v6_2 == LShR(v6, 24))
v16_3 = BitVec('v16_3', w)
s.add(v16_3 == v6_2 - v16_2)
v4_3 = BitVec('v4_3', w)
s.add(v4_3 == v4_2 - v16_3)
v3_4 = BitVec('v3_4', w)
s.add(v3_4 == v5 + v3_3 + v2_3)
s.add(v4_3 + v3_4 == 0)
print(s.check())
print(s.model())

