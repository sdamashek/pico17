LIMIT = 2**46
LEAPS = 8388608 # sqrt(LIMIT)
ALPHA = 41899070570517490692126143234857256603477072005476801644745865627893958675820606802876173648371028044404957307185876963051595214534530501331532626624926034521316281025445575243636197258111995884364277423716373007329751928366973332463469104730271236078593527144954324116802080620822212777139186990364810367977
f = {}
distance = []
table = []
n = 174807157365465092731323561678522236549173502913317875393564963123330281052524687450754910240009920154525635325209526987433833785499384204819179549544106498491589834195860008906875039418684191252537604123129659746721614402346449135195832955793815709136053198207712511838753919608894095907732099313139446299843
s = 1
m = 1
while 2*s/m <= LEAPS/4: # table size
    distance.append(s)
    s *= 2
    m += 1
m -= 1
for i in range(m):
    t = distance[i]
    table.append(pow(ALPHA, t, n))

x = pow(ALPHA, LIMIT, n)
print("Setting trap")
dn = 0
for j in range(LEAPS):
    t = x//m
    i = x%m
    intermed = (x * table[i])
    x = intermed % n
    dn += distance[i]
print("Set trap")
print("Table length = {}".format(len(table)))

trap = x
y = 49328183005174339219065565313828966417045193088638120053918215321010951835300705516452396623343805584758620954564114577415813087206713722257483332074907010208375394891372106513275423125113887380154045940018944754488027695723522881139660509353823631557616700415221598969561490112998301578923776574119707118769
x = y
dm = 0
while True:
    i = x % m

    intermed = (x * table[i])
    x = intermed % n
    dm += distance[i]
    if (x == trap) or (dm > (LIMIT + dn)):
        break
if dm > LIMIT + dn:
    print("Failed")
else:
    print("SUCCESS: discrete log = {}".format(LIMIT + dn - dm))
